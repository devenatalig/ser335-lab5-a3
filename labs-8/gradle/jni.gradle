apply plugin: 'c'
apply plugin: 'gradle-one-jar'

model {
    components {
        main(NativeLibrarySpec) {
            binaries.all {

                def javaHome =org.gradle.internal.jvm.Jvm.current().javaHome

                cCompiler.args '-I', "$javaHome/include"

                if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "$javaHome/include/linux"

                    // Clever-ass compilers will try to protect us from
                    // Getting ourselves rekt and overflowing buffers
                    // But we want that to happen so that the JVM has
                    // to step in. See ChecksumCalculator.c
                    //cCompiler.args '-fno-sanitize=address'
                }

                if(targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "$javaHome/include/darwin"
                    cCompiler.args '-D_FORTIFY_SOURCE=0'
                }

                if(targetPlatform.operatingSystem.windows) {
                    cCompiler.args '-I', "$javaHome/include/win32"
                    // TODO: prevent sanitization by compiler
                }

                if(project.hasProperty('CHECKSUM_MAX_FILE_NAME_LENGTH')) {
                    cCompiler.define 'MAX_FILE_NAME_LENGTH', project['CHECKSUM_MAX_FILE_NAME_LENGTH']
                }
            }
        }
    }
}

task jniHeaders {
    def headerFile = new File('src/main/headers/jni_exports.h')

    inputs.files sourceSets.main.output
    outputs.file headerFile
    doLast {
        headerFile.parentFile.mkdirs()
        exec {
            executable org.gradle.internal.jvm.Jvm.current().getExecutable('javah')
            args '-o', headerFile
            args '-classpath', sourceSets.main.output.classesDir
            // TODO: do for each file
            args 'ru.gvsmirnov.perv.labs.rekt.ChecksumCalculator'
        }
    }
}

task jarWithNatives(type: OneJar, dependsOn: [jniHeaders, 'mainSharedLibrary']) {
    mainClass = 'ru.gvsmirnov.perv.labs.rekt.ChecksumCalculator'
    archiveName = 'checksum.jar'
    //FIXME: de-hardcode
    binLib = files('build/binaries/mainSharedLibrary/libmain.so')
}
